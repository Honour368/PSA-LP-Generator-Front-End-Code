import React from 'react'
import ReactDOM from 'react-dom/client'
import {Link} from 'react-router-dom'
import { Container, Heading, List, ListItem, Text, UnorderedList, Wrap, WrapItem, list, textDecoration } from "@chakra-ui/react";
import {
    Table,
    Thead,
    Tbody,
    Tfoot,
    Tr,
    Th,
    Td,
    TableCaption,
    TableContainer,
    Button
  } from '@chakra-ui/react'

export default function Content(props) {
    const[Feedback, setFeedback] = React.useState({}) 

    //GPT response data passed from parent component - "Create" - in the form of JSON object
    //function to extract keys from json object
    function getKeys (obj) {
        return Object.keys(obj)    
    }

    var column_keys = []
    var day_keys =[]
    var feedBack = {};
    feedBack = Feedback;

    var materialList = ["quiz", "handout", "excerpt", "worksheet", "example"]
    let processedMaterialListObj = {}

    //function to generate an array of columns for the table
    //i.e the columns are dynamic and are determined by instruction passed to GPT via the prompt.
    function generateColumns (obj) {
        // let week_keys = getKeys(obj)
        let day_keys = getKeys(obj)
        // console.log(getKeys(obj[day_keys[0]]))
        column_keys = getKeys(obj[day_keys[0]])
    }

    //function to generate an array of rows for the table
    function generateDayKeys (obj) {
        day_keys = getKeys(obj)
    }

    //function to extract the material and its corresponding learning objective to be generated by GPT
    function generateMaterials(e) {
        let greatGrandparentId = (document.getElementById(e.target.id)).parentElement.parentElement.parentElement.id
        let text = (e.target.innerHTML).replace(/^([0-9]+.\s*)/, "");
        console.log(text)
        let objective = props.data[greatGrandparentId]['objective']
        props.generateMaterial(text, objective)
    }

    //functions to immitate hovering effect for the links in the material list
    function mouseover(e) {
        document.getElementById(e.target.id).style.textDecoration="none"
    }
    function mouseout(e) {
        document.getElementById(e.target.id).style.textDecoration="underline"
    }

    //function to display generatable materials as links (a variant of the button component)
    function processMaterialList (obj) {
        for (let day_key of day_keys) {
            let listArray = (obj[day_key]['material list']).split('\n')
            listArray = listArray.filter(item=>item!='')
            for (let listIndex in listArray) {  
                for (let material of materialList) {
                    let string = listArray[listIndex]
                    if ((string.toLowerCase()).includes(material)) {
                        listArray[listIndex] = <Button style={{display:"flex", justifyContent:"left", textDecoration:"underline"}} onMouseOver={mouseover} onMouseOut={mouseout} whiteSpace='pre-wrap' variant='link' colorScheme='blue' onClick={generateMaterials} id={day_key+" "+string}>{string}</Button>
                        break
                    }
                }
            }
            processedMaterialListObj[day_key] = listArray
        }
    }

    
    //function to store/delete the content of each cell within an object - Feedback object
    function storeCell(e) {
        var currentElementID = e.target.id
        var currentElement = document.getElementById(currentElementID)
        var grandparent = document.getElementById(currentElementID).parentElement.parentElement.id
        var greatGrandparent = document.getElementById(currentElementID).parentElement.parentElement.parentElement.id
        var value = props.data[greatGrandparent][grandparent];
        var key = grandparent + " of " + greatGrandparent;
       
        if(!feedBack.hasOwnProperty(key)){
            feedBack[key] = value;
            setFeedback(feedBack)
            currentElement.innerHTML = "Drop"
        }
        else{
            delete feedBack[key]
            setFeedback(Feedback)
            currentElement.innerHTML = "Keep"
        }
        console.log(Feedback);
    }

    //function to submit array of stored content and trigger response generation from GPT
    //also clears feedback array
    function resubmit(){
        props.reSubmit(Feedback)
        props.setIsResponse(false)
        props.setIsLoading(true)
        alert("Your request has been submitted!" + "\n" + "Please wait a moment.")
        setFeedback({})
    }

    
    //This generates the table for displaying the response from GPT.
  return (
   <TableContainer maxWidth='100%'>
        <Table variant='striped' colorScheme="blue"> 
            <Thead>
                <Tr>
                    <Th>
                        Week and Day
                    </Th>
                    {generateColumns(props.data)}
                    {generateDayKeys(props.data)}
                    {processMaterialList(props.data)}
                    {column_keys.map((column_key)=>{
                        return <Th key={column_key} maxWidth='20%'>
                            {column_key}
                        </Th>
                    })}
                </Tr>
            </Thead>
            <Tbody>
                {day_keys.map((day_key)=>{  
                    // console.log(day_key);
                    return <Tr key={day_key + "row"} id={day_key}>
                        <Td key={day_key} whiteSpace='pre-wrap' maxWidth='50px' id={day_key + " row"}>
                            {day_key}
                        </Td>
                        <Td key={day_key + " title"} whiteSpace='pre-wrap' maxWidth='150px' id={"title"}>
                            {props.data[day_key]['title']}
                            <div id={day_key + " title" + " div"}>
                                <Button mt={4} id={day_key + " title" + " button"} size ="sm" variant="outline" colorScheme='blue' onClick={storeCell}>
                                    Keep
                                </Button> 
                            </div>      
                        </Td>
                        <Td key={day_key + " objective"} whiteSpace='pre-wrap' maxWidth='200px' id={"objective"}>
                            {props.data[day_key]['objective']}
                            <div id={day_key + " objective" + " div"}>
                                <Button mt={4} id={day_key + " objective" + " button"} size ="sm" variant="outline" colorScheme='blue' onClick={storeCell}>
                                    Keep
                                </Button> 
                            </div>
                        </Td>
                        <Td key={day_key + " activity"} whiteSpace='pre-wrap' maxWidth='400px' id={"activity"}>
                            {props.data[day_key]['activity']}
                            <div id={day_key + " activity" + " div"}>
                                <Button mt={4} id={day_key + " activity" + " button"} size ="sm" variant="outline" colorScheme='blue' onClick={storeCell}>
                                    Keep
                                </Button> 
                            </div>
                        </Td>
                        <Td key={day_key + " material list"} whiteSpace='pre-wrap' maxWidth='250px' id={"material list"}>
                            {(processedMaterialListObj[day_key]).map((element)=>{
                                if ((typeof element) == "object"){
                                    // console.log(element.props.children)
                                    return <div key={day_key + " " + element.props.children}>{element}</div>
                                }
                                else{
                                    return <div key={day_key + " " + element}>{element}</div>
                                }
                                
                            })
                            }
                               
                            <div id={day_key + " material list" + " div"}>
                                <Button mt={4} id={day_key + " material list" + " button"} size ="sm" variant="outline" colorScheme='blue' onClick={storeCell}>
                                    Keep
                                </Button> 
                            </div>
                        </Td>
                    </Tr>
                })}
            </Tbody>
        </Table>
        <Button mt={4} colorScheme='teal' onClick={resubmit} type='submit'>
            Refresh
        </Button>
   </TableContainer>
    
  )
}